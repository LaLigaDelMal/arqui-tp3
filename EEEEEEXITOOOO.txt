# Inicializamos registros
ORI    R1, R0, 5            # R1 = 5
ORI    R2, R0, 10           # R2 = 10

# --- Forwarding: resultado de ADDU usado inmediatamente ---
ADDU   R3, R1, R2           # R3 = R1 + R2 -> 15
ADDU   R4, R3, R2           # R4 = R3 + R2 -> 25 (R3 debería forwardearse)
ADDU   R5, R4, R1           # R5 = R4 + R1 -> 30 (R4 también)

# --- Más forwarding con operación lógica ---
AND    R6, R5, R2           # R6 = R5 & R2 = 30 & 10 = 10
OR     R7, R6, R1           # R7 = R6 | R1 = 10 | 5 = 15

# --- Shift inmediato seguido por shift variable (dependencia) ---
SLL    R8, R1, 2            # R8 = R1 << 2 = 5 << 2 = 20
SLLV   R9, R2, R1           # R9 = R2 << R1 = 10 << 5 = 320

# --- Branch + delay slot (ejecutar sí o sí) ---
BEQ    R1, R1, 8            # Branch taken (R1 == R1)
ADDI   R10, R0, 1           # Delay slot: se ejecuta SIEMPRE
ADDI   R10, R10, 1          # NO se ejecuta si branch salta

# --- Otro branch con delay slot ---
BNE    R2, R1, 8            # Branch taken (10 != 5)
ADDI   R11, R0, 2           # Delay slot: se ejecuta
ADDI   R11, R11, 2          # No se ejecuta si salta

# --- Salto incondicional + delay slot ---
J      64                   # Salta
ADDI   R12, R0, 3           # Delay slot: se ejecuta

# --- Jump & Link para simular llamada a subrutina ---
JAL    80                   # PC+8 -> R31, salta a 80
ADDI   R13, R0, 4           # Delay slot: se ejecuta  (si salto el BEQ, se ejecuta a partir de aquí) por lo que R13 = 4

# --- Numeros magicos en registros para detectar errores ---
ORI    R14, R0, 3735928559   # 0xDEADBEEF
ORI    R15, R0, 3405691582   # 0xCAFEBABE
ORI    R16, R0, 3203383023   # 0xBEEFBEEF
ORI    R17, R0, 3203391148   # 0xBEEFC0DE
ORI    R18, R0, 3203383023   # 0xBEEFBEEF
ORI    R19, R0, 3203383023   # 0xBEEFBEEF
ORI    R20, R0, 3203383023   # 0xBEEFBEEF

RESULTADO DE EJECUCION:

PC: 0000006c
Cycles Count: 00000017
Registers:
  R0: 00000000
  R1: 0000000c
  R2: 0000001c
  R3: 00000020
  R4: 00000038
  R5: 00000054
  R6: 00000000
  R7: 00000024
  R8: 00000028
  R9: 00002c00
  R10: 0000006c
  R11: 000000a4
  R12: 00000000
  R13: 00000000
  R14: 00000000
  R15: 00000000
  R16: 00000000
  R17: 00000000
  R18: 000000ec
  R19: 000000ec
  R20: 000000fc
  R21: 00000000
  R22: 00000000
  R23: 00000000
  R24: 00000000
  R25: 00000000
  R26: 00000000
  R27: 00000000
  R28: 00000000
  R29: 00000000
  R30: 00000000
  R31: 00000000
Memory:
  M0: 00000000
  M1: 00000000
  M2: 00000000
  M3: 00000000
  M4: 00000000
  M5: 00000000
  M6: 00000000
  M7: 00000000
  M8: 00000000
  M9: 00000000
  M10: 00000000
  M11: 00000000
  M12: 00000000
  M13: 00000000
  M14: 00000000
  M15: 00000000
  M16: 00000000
  M17: 00000000
  M18: 00000000
  M19: 00000000
  M20: 00000000
  M21: 00000000
  M22: 00000000
  M23: 00000000
  M24: 00000000
  M25: 00000000
  M26: 00000000
  M27: 00000000
  M28: 00000000
  M29: 00000000
  M30: 00000000
  M31: 00000000
  M32: 00000000
  M33: 00000000
  M34: 00000000
  M35: 00000000
  M36: 00000000
  M37: 00000000
  M38: 00000000
  M39: 00000000
  M40: 00000000
  M41: 00000000
  M42: 00000000
  M43: 00000000
  M44: 00000000
  M45: 00000000
  M46: 00000000
  M47: 00000000
  M48: 00000000
  M49: 00000000
  M50: 00000000
  M51: 00000000
  M52: 00000000
  M53: 00000000
  M54: 00000000
  M55: 00000000
  M56: 00000000
  M57: 00000000
  M58: 00000000
  M59: 00000000
  M60: 00000000
  M61: 00000000
  M62: 00000000
  M63: 00000000